- name: Run uberspace postgresql role
  tags: postgresql
  vars:
    uberspace_tools_goal: "{{ uberspace_tools_goal_pleroma }}"
  import_role:
    name: uberspace_postgresql

# - name: test environment
#   shell: "echo $PATH"
#   register: envtest
#   changed_when: false
# - name: output envtest
#   debug:
#     var: envtest.stdout_lines
- name: create target dir
  file:
    dest: "{{ pleroma_main_dir }}"
    state: directory
- name: clone pleroma
  git:
    repo: "{{ pleroma_repo }}"
    dest: "{{ pleroma_main_dir }}"
    force: yes
    depth: 1
# - name: set mix environment to prod
#   lineinfile:
#     dest: .bash_profile
#     line: 'export MIX_ENV=prod'

- name: Install ansible dependency pexpect via pip into user
  tags: test2
  pip:
    name: pexpect>=3.3
    extra_args: --user

- name: Install Hex
  tags: test
  command: mix local.hex --force
  args:
    chdir: "{{ pleroma_main_dir }}"
    creates: "{{ uberspace_spacedir }}/.mix/archives/hex-2.0.0/"
- name: Install rebar
  tags: test
  command: mix local.rebar --force
  args:
    chdir: "{{ pleroma_main_dir }}"
    creates: "{{ uberspace_spacedir }}/.mix/elixir/1-14/rebar3"
# - name: Run mix deps.get to install Elixir dependencies
#   tags: test
#   command: mix deps.get
#   args:
#     chdir: "{{ pleroma_main_dir }}"
#     creates: "{{ pleroma_main_dir }}/deps"

# responses should be redundant because of earlier explicit --force installation
- name: Run mix deps.get with choices to install Elixir dependencies
  tags: test
  expect:
    command: mix deps.get
    chdir: "{{ pleroma_main_dir }}"
    creates: "{{ pleroma_main_dir }}/deps"
    timeout: 300
    responses:
      'Shall I install Hex': 'Y'

- name: Run  mix pleroma.instance gen with choices to compile files and generate a configuration file
  tags: test
  expect:
    command: mix pleroma.instance gen
    chdir: "{{ pleroma_main_dir }}"
    creates: "{{ pleroma_main_dir }}/_build"
#    creates: "{{ pleroma_main_dir }}/config/generated_config.exs"
    timeout: 300
    responses:
      'Shall I install rebar3': 'Y'
      'What domain will your instance use': ''
      'What is the name of your instance': 'DNMF'
      'What is your admin email address': ''
      'What email address do you want to use for sending email notifications': ''
      'Do you want search engines to index your site': 'n'
      'Do you want to store the configuration in the database': 'n'
      'What is the hostname of your database': 'localhost'
      'What is the name of your database': 'foobar2_pleroma'
      'What is the user used to connect to your database': 'foobar2_pleroma'
      'What is the password used to connect to your database': ''
      'Would you like to use RUM indices': 'y'
      'What port will the app listen to': '4000'
      'What ip will the app listen to': '127.0.0.1' # '0.0.0.0'
      'What directory should media uploads go in': 'uploads'
      'What directory should custom public files be read from': ''
      'Do you want to strip location (GPS) data from uploaded images': 'y'
      'Do you want to read data from uploaded files so clients can use it to prefill fields like image description': 'n'
      'Do you want to anonymize the filenames of uploads': 'y'
      'Do you want to deduplicate uploaded files': 'y'
- name: Copy generated config file
  copy:
    remote_src: true
    src: "{{ pleroma_main_dir }}/config/generated_config.exs"
    dest: "{{ pleroma_main_dir }}/config/prod.secret.exs"
# - name: Change specific settings in config file
#   tags: test2
#   lineinfile:
#     dest: "{{ pleroma_main_dir }}/config/prod.exs"
#     line: '  http: [port: {{ pleroma_port }}],'
#     regexp: '^  http'

# TODO not right now, because of the multitude of secrets in the file, instead use the expect/command/responses + lineinfile
# - name: Deploy own config
#   template:
#     src: templates/prod.secret.exs.j2
#     dest: "{{ pleroma_main_dir }}/config/prod.secret.exs"
# - name: Deploy own PostgreSQL script
#   template:
#     src: templates/setup_db.psql.j2
#     dest: "{{ pleroma_main_dir }}/config/setup_db.psql"

- name: Check PostgreSQL databases
  tags: sql
  environment: "{{ postgres_environment }}"
  postgresql_info:
    login_user: "{{ postgres_username_clusteruser }}"
    filter: databases
  register: pleroma_postgresql_databases
# TODO add idempotency: only run, when
- name: Show PostgreSQL databases
  tags: sql
  debug:
    msg: "{{ pleroma_postgresql_databases }}"
- name: Prepare PostgreSQL for Pleroma - Run generated script
  tags: sql
  environment: "{{ postgres_environment }}"
  when: not pleroma_db_name in pleroma_postgresql_databases
  community.postgresql.postgresql_script:
    login_user: "{{ postgres_username_clusteruser }}"
    path: "{{ pleroma_main_dir }}/config/setup_db.psql"

- name: mix ecto.migrate to run the database migrations #FIXME doesn't find the "mix" command?!
  tags: test2
  command: "mix ecto.migrate"
  args:
    chdir: "{{ pleroma_main_dir }}"
#      creates: "{{ pleroma_main_dir}}/deps"
  register: migrateoutput
- name: output migrateoutput
  tags: test2
  debug:
    var: migrateoutput

# name: add domain to uberspace config

#Run mix generate_config. This will ask you a few questions about your instance and generate a configuration file in config/generated_config.exs. Check that and copy it to either config/dev.secret.exs or config/prod.secret.exs. It will also create a config/setup_db.psql;
#  you may want to double-check this file in case you wanted a different username, or database name than the default. Then you need to run the script as PostgreSQL superuser (i.e. sudo su postgres -c "psql -f #config/setup_db.psql"). It will create a pleroma db user, database and will setup needed extensions that need to be set up. Postgresql super-user privileges are only needed for this step.
#For these next steps, the default will be to run pleroma using the dev configuration file, config/dev.secret.exs. To run them using the prod config file, prefix each command at the shell with MIX_ENV=prod. For example: MIX_ENV=prod mix phx.server.
#Run mix ecto.migrate to run the database migrations. You will have to do this again after certain updates.
#You can check if your instance is configured correctly by running it with mix phx.server and checking the instance info endpoint at /api/v1/instance. If it shows your uri, name and email correctly, you are configured correctly. If it shows something like localhost:4000, your configuration is probably wrong, unless you are running a local development setup.
#The common and convenient way for adding HTTPS is by using Nginx as a reverse proxy. You can look at example Nginx configuration in installation/pleroma.nginx. If you need TLS/SSL certificates for HTTPS, you can look get some for free with letsencrypt: https://letsencrypt.org/
#The simplest way to obtain and install a certificate is to use Certbot. Depending on your specific setup, certbot may be able to get a certificate and configure your web server automatically.
#[Not tested with system reboot yet!] You'll also want to set up Pleroma to be run as a systemd service. Example .service file can be found in installation/pleroma.service you can put it in /etc/systemd/system/.
