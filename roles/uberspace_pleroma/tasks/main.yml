- name: Run uberspace PostgreSQL role
  tags: postgresql
  vars:
    uberspace_tools_goal: "{{ uberspace_tools_goal_pleroma }}"
  import_role:
    name: uberspace_postgresql

# - name: Test environment
#   shell: "echo $PATH"
#   register: envtest
#   changed_when: false
# - name: Output envtest
#   debug:
#     msg: "{{ envtest.stdout_lines }}"
- name: "Create target dir {{ pleroma_main_dir }}"
  file:
    dest: "{{ pleroma_main_dir }}"
    state: directory
- name: Clone pleroma repository
  git:
    repo: "{{ pleroma_repo }}"
    dest: "{{ pleroma_main_dir }}"
    version: "{{ pleroma_version }}"
    force: true
    # see https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/
#    depth: 1 # leads to (uncritical) errormessages because `it describe` doesn't work anymore
#    single_branch: true # would probably work, but only with newer Ansible versions
    # probably best would be a Treeless clone using `--filter=tree:0` but that's not supported by Ansible's git module yet
- name: Set mix environment
  lineinfile:
    path: ~/.bash_profile
    line: 'export {{ pleroma_environment_string }}'
    insertbefore: export PATH

- name: Install ansible dependency pexpect via pip into user
  pip:
    name: pexpect>=3.3
    extra_args: --user

- name: Install Hex
  environment: "{{ pleroma_environment }}"
  command: mix local.hex --force
  args:
    chdir: "{{ pleroma_main_dir }}"
    creates: "{{ uberspace_spacedir }}/.mix/archives/hex-2.0.6/"
- name: Install rebar
  environment: "{{ pleroma_environment }}"
  command: mix local.rebar --force
  args:
    chdir: "{{ pleroma_main_dir }}"
    creates: "{{ uberspace_spacedir }}/.mix/elixir/1-14/rebar3"

- name: Run mix deps.get with choices to install Elixir dependencies
  environment: "{{ pleroma_environment }}"
  expect:
    chdir: "{{ pleroma_main_dir }}"
    creates: "{{ pleroma_main_dir }}/deps"
    command: mix deps.get
    timeout: 300
    # redundant because of earlier explicit --force installation
    responses:
      'Shall I install Hex': 'Y'

- name: Run mix pleroma.instance gen with choices to compile files and generate a configuration file (takes a while, no worries)
  tags: config
  vars:
    forceswitch: "{{ pleroma_reconfigure | default(false) | bool | ternary(' --force','') }}"
  environment: "{{ pleroma_environment }}"
  expect:
    # --force to overwrite setup_db.psql
    command: mix pleroma.instance gen{{ forceswitch }}
    chdir: "{{ pleroma_main_dir }}"
#    creates: "{{ pleroma_main_dir }}/_build/{{ pleroma_mix_environment }}"
#    creates: "{{ pleroma_main_dir }}/config/generated_config.exs"
#    creates: "{{ pleroma_main_dir }}/config/setup_db.psql"
    creates: "{{ pleroma_reconfigure | default(false) | bool | ternary(omit, pleroma_main_dir + '/config/setup_db.psql') }}"
    timeout: 1000
    responses: "{{ pleroma_config_genquestion_responses }}"

#  register: genresult
# - name: Show genresult
#   debug:
#     msg: "{{ genresult }}"

- name: Change specific settings in generated config file
  tags: config
  loop: "{{ pleroma_config_adjustments }}"
  lineinfile:
    dest: "{{ pleroma_main_dir }}/config/generated_config.exs"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
    insertafter: "{{ item.insertafter }}"
- name: Copy generated config file
  tags: config
  copy:
    remote_src: true
    src: "{{ pleroma_main_dir }}/config/generated_config.exs"
    dest: "{{ pleroma_main_dir }}/config/{{ pleroma_mix_environment }}.secret.exs"
  notify: Restart pleroma

- name: Add a redirect on the master domain/server to access pleroma's webfinger description
  when: pleroma_host != pleroma_handle_host
  delegate_to: "{{ uberspace_masterspace_inventoryname | default(inventory_hostname) }}"
  lineinfile:
    dest: "/var/www/virtual/{{ uberspace_masterspace_loginname | default(uberspace_loginname) }}/{{ pleroma_handle_host }}/.htaccess"
    line: "RewriteRule ^\\.well-known/host-meta https://{{ pleroma_host }}/.well-known/host-meta [R=301,L]"
    create: true

- name: Check PostgreSQL databases
  tags: sql
  environment: "{{ postgres_environment }}"
  postgresql_info:
    login_user: "{{ postgres_username_clusteruser }}"
    filter: databases
  register: pleroma_postgresql_databases
# - name: Show PostgreSQL databases
#   tags: sql
#   debug:
#     msg: "{{ pleroma_postgresql_databases }}"

- name: Prepare PostgreSQL for Pleroma - Run generated script via command module
  tags: sql
  when: not pleroma_db_name in pleroma_postgresql_databases.databases
  environment: "{{ postgres_environment }}"
  args:
    chdir: "{{ pleroma_main_dir }}"
  command: "psql -f {{ pleroma_main_dir }}/config/setup_db.psql"
  register: sqlscriptresult
# - name: Prepare PostgreSQL for Pleroma - Run generated script - currently not working properly
#   tags: sql
# #  environment: "{{ postgres_environment }}"
#   when: not pleroma_db_name in pleroma_postgresql_databases
#   community.postgresql.postgresql_script:
#     login_user: "{{ postgres_username_clusteruser }}"
#     path: "{{ pleroma_main_dir }}/config/setup_db.psql"
#     encoding: UTF-8
# - name: Prepare PostgreSQL for Pleroma - Run generated script via postgresql_query - currently not working properly
#   tags: sql
# #  environment: "{{ postgres_environment }}"
#   when: not pleroma_db_name in pleroma_postgresql_databases
#   community.postgresql.postgresql_query:
#     login_user: "{{ postgres_username_clusteruser }}"
#     path_to_script: "{{ pleroma_main_dir }}/config/setup_db.psql"
#     encoding: UTF-8

- name: Run mix ecto.migrate to run the database migrations (takes a while, no worries)
  environment: "{{ pleroma_environment }}"
  command: "mix ecto.migrate"
  args:
    chdir: "{{ pleroma_main_dir }}"
  register: migrateoutput
  changed_when: '"[info] Migrations already up" not in migrateoutput.stdout'
# - name: output migrateoutput
#   debug:
#     msg: "{{ migrateoutput }}"

- name: Get ExifTool
  unarchive:
    remote_src: true
    src: "{{ pleroma_exiftool_url }}"
    extra_opts:
    - "--strip-components=1"
    - "{{ pleroma_exiftool_name }}/exiftool"
    - "{{ pleroma_exiftool_name }}/lib/"
    dest: "{{ uberspace_spacedir }}/bin"

- name: "Set up prune-vacuum cronjob for remote posts older than {{ pleroma_remote_post_retention_days }} days to remove"
  cron:
    name: "Check daily at midnight for remote posts older than {{ pleroma_remote_post_retention_days }} days to remove"
    special_time: daily
    job: "cd {{ pleroma_main_dir }} && {{ pleroma_environment_string }} mix pleroma.database prune_objects --vacuum >> /dev/null"

- name: Add pleroma web backends to the uberspace requested ones
  tags: backends
  set_fact:
    uberspace_webbackends_goal: "{{ uberspace_webbackends_goal | default([]) + pleroma_webbackends }}"

- name: Deploy supervisord service description ini
  template:
    src: pleroma.ini.j2
    dest: "{{ uberspace_services_dir }}/pleroma.ini"
  notify: Reread supervisord config

- name: Flush handlers to enact changes
  meta: flush_handlers

- name: Output users
  debug:
    msg: "{{ pleroma_users }}"

- name: Create users
  environment: "{{ pleroma_environment }}"
  loop: "{{ pleroma_users }}"
  command: "mix pleroma.user new {{ item.nickname }} {{ item.email }} --password {{ item.password | default(pleroma_users_passwordlookup) }} {{ item.admin | default(false) | ternary('--admin','') }} --assume-yes"
  args:
    chdir: "{{ pleroma_main_dir }}"
  register: useroutput
  failed_when: useroutput.rc > 0 and pleroma_user_already_present_check not in useroutput.stderr
  changed_when: pleroma_user_already_present_check not in useroutput.stderr
# - name: Output useroutput
#   debug:
#     msg: "{{ useroutput }}"
