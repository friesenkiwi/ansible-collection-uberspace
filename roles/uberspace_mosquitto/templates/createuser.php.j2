<?php

$mysql_host = "{{ mosquitto_mysql_host }}";
$mysql_user = "{{ mosquitto_mysql_user }}";
$mysql_password = "{{ mosquitto_mysql_password }}";
$mysql_database = "{{ mosquitto_mysql_database }}";
$mysqli = new mysqli($mysql_host, $mysql_user, $mysql_password, $mysql_database);

define("MOSQUITTO_AUTH_READ",0b1);
define("MOSQUITTO_AUTH_WRITE",0b10);
define("MOSQUITTO_AUTH_SUBSCRIBE",0b100);

$mosquitto_topics = [['topic' => '{{ mosquitto_topic_wildcard_multilevel }}', 'permission' => MOSQUITTO_AUTH_SUBSCRIBE],['topic' => '{{ mosquitto_topic_wildcard_multilevel_userspecific }}', 'permission' => MOSQUITTO_AUTH_READ | MOSQUITTO_AUTH_WRITE]];

s$userPasswordHash = passwordHash($_GET['username']);
$creatorClientHash = hash('sha256', serialize(getallheaders()));

insert_user($mysqli, $_GET['username'], $_GET['tid'], $userPasswordHash, $mosquitto_topics, $creatorClientHash);

function insert_user($mysqli, $username, $tid, $userPasswordHash, $mosquitto_topics, $creatorClientHash){

    if ($mysqli->connect_errno) {
        echo "Failed to connect to MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error;
    }

    try {
        /* Transaktion starten */
        $mysqli->begin_transaction();

        // Prepared statement, stage 1: prepare
        if (!($stmt = $mysqli->prepare("INSERT INTO users(creator_hash, username, tid, pw) VALUES (?, ?, ?, ?)"))) {
            echo "Prepare failed: (" . $mysqli->errno . ") " . $mysqli->error;
        }

        if (!$stmt->bind_param("ssss",$creatorClientHash , $username, $tid, $userPasswordHash)) {
            echo "Binding parameters failed: (" . $stmt->errno . ") " . $stmt->error;
        }
        try {
          if (!$stmt->execute()) {
              echo "Execute failed: (" . $stmt->errno . ") " . $stmt->error;
          }
        } catch(mysqli_sql_exception $exception){
          if($exception->getSqlState() == "23000"){ // ER_DUP_KEY Duplicate entry '' for key 'users_unique'
            if(!update_user($mysqli, $username, $tid, $userPasswordHash, $creatorClientHash)){
              print "Username $username already in use. Please choose a different one.";              
            }
          } else {
            throw $exception;
          }
        }

        foreach( $mosquitto_topics as $CUR_topic){

        if (!($stmt = $mysqli->prepare("INSERT INTO acls(username, topic, rw) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE rw = ?"))) {
            echo "Prepare failed: (" . $mysqli->errno . ") " . $mysqli->error;
        }

        if (!$stmt->bind_param("ssss", $username, $CUR_topic['topic'], $CUR_topic['permission'], $CUR_topic['permission'])) {
            echo "Binding parameters failed: (" . $stmt->errno . ") " . $stmt->error;
        }

        if (!$stmt->execute()) {
            echo "Execute failed: (" . $stmt->errno . ") " . $stmt->error;
        }
        }
        /* Wenn der Code bis hierher fehlerfrei ist, die Daten in der Datenbank bestÃ¤tigen */
        $mysqli->commit();

    } catch(mysqli_sql_exception $exception){
        if($exception->getSqlState() == "23000"){ // ER_DUP_KEY Duplicate entry '' for key 'users_unique'
          $mysqli->rollback();
          print "Username $username already in use. Please choose a different one.";
          return false;
        } else {
          $mysqli->rollback();
          print_r($exception);
          throw $exception;
          return false;
        }
    }

    $stmt->close();
    return true;
}


function update_user($mysqli, $username, $tid, $userPasswordHash, $creatorClientHash){
        // Prepared statement, stage 1: prepare
        if (!($stmt = $mysqli->prepare("UPDATE users SET tid=?, pw=? WHERE creator_hash=? AND username=?"))) {
            echo "Prepare failed: (" . $mysqli->errno . ") " . $mysqli->error;
        }

        if (!$stmt->bind_param("ssss", $tid, $userPasswordHash, $creatorClientHash , $username)) {
            echo "Binding parameters failed: (" . $stmt->errno . ") " . $stmt->error;
        }
        if (!$stmt->execute()) {
            echo "Execute failed: (" . $stmt->errno . ") " . $stmt->error;
        }
        return $mysqli->affected_rows==1;
}

function passwordHash($password){
  $keyDerivationFunction = "PBKDF2";
  $hashAlgorithm = "sha512";
  $saltSize = 16;
  $salt = random_bytes($saltSize);
  $saltBase64Encoded = base64_encode($salt);
  $iterations = 100000;
  $keyLength = 64;
  $binaryOutput = true;
  $passwordHashStringSeparator = '$';

//  $password = test;
//  $saltBase64Encoded = "KZkuK3gbQywDRDDuNFlPfw==";
//  $salt = base64_decode($saltBase64Encoded);
//  $compareString='PBKDF2$sha512$100000$KZkuK3gbQywDRDDuNFlPfw==$qiTLzAo3QNpaIvBmEraoXU5ZgP8RnaB1irCPSxT5OYzw69iKTny0SCEQwHYUpxuMnjkvffkjIs0YhdY683VxsA==';

  $passwordHash = hash_pbkdf2($hashAlgorithm, $password, $salt, $iterations , $keyLength , $binaryOutput);

  $passwordHashBase64Encoded = base64_encode($passwordHash);

  $passwordHashStringArray[] = $keyDerivationFunction;
  $passwordHashStringArray[] = $hashAlgorithm;
  $passwordHashStringArray[] = $iterations;
  $passwordHashStringArray[] = $saltBase64Encoded;
  $passwordHashStringArray[] = $passwordHashBase64Encoded;
  $passwordHashString = implode($passwordHashStringSeparator, $passwordHashStringArray);

  return $passwordHashString;

}