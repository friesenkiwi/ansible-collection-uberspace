- name: Clone the cmake source code from GitHub
  tags: cmake
  git:
    repo: "{{ mosquitto_cmake_repo_url }}"
    dest: "{{ mosquitto_cmake_install_dir }}"
    version: "{{ mosquitto_cmake_install_version }}"
    force: true

    # ./bootstrap --prefix=${HOME}
# make
# make install

# which cmake => ~/bin/cmake
# ABER: libwebsockets HEAD benÃ¶tigt zwar eine neue CMake-Version, kompiliert damit aber nicht. Die letzte verÃ¶ffentlichte Version kompiliert aber nicht mit dem neuen CMake, also wieder das alte nehmen
# aberaber: CJSON braucht cmake>3 aber <4, also spezifische Version auschecken

- name: Build cmake via make
  tags: cmake
  shell:
    executable: /bin/bash
    chdir: "{{ mosquitto_cmake_install_dir }}"
    cmd: "source ~/.bash_profile && ./bootstrap --prefix=${HOME} && make && make install"
    creates: "{{ uberspace_spacedir }}/bin/cmake"
  register: cmake_build_result
- name: Show cmake build result
  tags: cmake
  debug:
    msg: "{{ cmake_build_result }}"


- name: Clone the cjson source code from GitHub
  tags: cjson
  git:
    repo: "{{ mosquitto_cjson_repo_url }}"
    dest: "{{ mosquitto_cjson_install_dir }}"
    force: true

- name: Create cjson build directory
  tags: cjson
  file:
    path: "{{ mosquitto_cjson_install_dir }}/{{ mosquitto_build_subdir }}"
    state: directory

- name: Build cjson via cmake / make
  tags: cjson
  shell:
    executable: /bin/bash
    chdir: "{{ mosquitto_cjson_install_dir }}/{{ mosquitto_build_subdir }}"
    cmd: "source ~/.bash_profile && cmake -DCMAKE_INSTALL_PREFIX:PATH=${HOME} .. && make && make install"
    creates: "{{ uberspace_spacedir }}/lib64/libcjson.so"
  register: cjson_build_result

- name: Show cjson build result
  tags: cjson
  debug:
    msg: "{{ cjson_build_result }}"


- name: Clone the libwebsockets source code from GitHub
  tags: websockets
  git:
    repo: "{{ mosquitto_libwebsockets_repo_url }}"
    dest: "{{ mosquitto_libwebsockets_install_dir }}"
    version: v4.3.5
    force: true

- name: Create libwebsockets build directory
  tags: websockets
  file:
    path: "{{ mosquitto_libwebsockets_install_dir }}/{{ mosquitto_build_subdir }}"
    state: directory
    
- name: Build libwebsockets via cmake / make
  tags: websockets
  shell:
    executable: /bin/bash
    chdir: "{{ mosquitto_libwebsockets_install_dir }}/{{ mosquitto_build_subdir }}"
    cmd: "source ~/.bash_profile && cmake -DCMAKE_INSTALL_PREFIX:PATH=${HOME} -DLWS_WITH_EXTERNAL_POLL=ON .. && make && make install"
    creates: "{{ uberspace_spacedir }}/lib/libwebsockets.so"
  register: libwebsockets_build_result

- name: Show libwebsockets build result
  tags: websockets
  debug:
    msg: "{{ libwebsockets_build_result }}"



- name: Clone the mosquitto source code from GitHub
  tags: build_mosquitto
  git:
    repo: "{{ mosquitto_mosquitto_repo_url }}"
    dest: "{{ mosquitto_mosquitto_install_dir }}"
    force: true

- name: Create mosquitto build directory
  tags: build_mosquitto
  file:
    path: "{{ mosquitto_mosquitto_install_dir }}/{{ mosquitto_build_subdir }}"
    state: directory

- name: Build mosquitto via cmake / make
  tags: build_mosquitto
  shell:
    executable: /bin/bash
    chdir: "{{ mosquitto_mosquitto_install_dir }}/{{ mosquitto_build_subdir }}"
    cmd: "source ~/.bash_profile && cmake -DCMAKE_INSTALL_PREFIX:PATH=${HOME} -DWITH_WEBSOCKETS=yes .. && make && make install"
    creates: "{{ uberspace_spacedir }}/sbin/mosquitto"
  register: mosquitto_build_result

- name: Show mosquitto build result
  tags: build_mosquitto
  debug:
    msg: "{{ mosquitto_build_result }}"


- name: Clone the mosquitto-go-auth source code from GitHub
  git:
    repo: "{{ mosquitto_authplugin_go_repo_url }}"
    dest: "{{ mosquitto_authplugin_go_install_dir }}"
    force: true
# - name: Build mosquitto-go-auth
#   make:
#     chdir: "{{ mosquitto_authplugin_go_install_dir }}"
#     creates: "{{ mosquitto_authplugin_go_install_dir }}/{{ mosquitto_authplugin_go_filename }}"
#   notify: Restart mosquitto
- name: Build mosquitto-go-auth via make
  tags: authplugin
  shell:
    executable: /bin/bash
    chdir: "{{ mosquitto_authplugin_go_install_dir }}"
    cmd: "source ~/.bash_profile && make"
    creates: "{{ mosquitto_authplugin_go_install_dir }}/{{ mosquitto_authplugin_go_filename }}"
  notify: Restart mosquitto

- name: Link mosquitto-go-auth into config dir
  tags: authplugin
  file:
    state: link
    src: "{{ mosquitto_authplugin_go_install_dir }}/{{ mosquitto_authplugin_go_filename }}"
    dest: "{{ uberspace_spacedir }}/etc/mosquitto/conf.d/{{ mosquitto_authplugin_go_filename }}"
  notify: Restart mosquitto

# - name: Clone the jpmens mosquitto-auth-plug source code from GitHub
#  tags: authplugin, classic
#  git:
#    repo: "{{ mosquitto_authplugin_classic_repo_url }}"
#    dest: "{{ mosquitto_authplugin_classic_install_dir }}"
#    force: true

# sourcecodechange
# compile

- name: Link mosquitto-auth-plug into config dir
  tags: authplugin
  file:
    state: link
    src: "{{ mosquitto_authplugin_classic_install_dir }}/{{ mosquitto_authplugin_classic_filename }}"
    dest: "{{ uberspace_spacedir }}/etc/mosquitto/conf.d/{{ mosquitto_authplugin_classic_filename }}"
  notify: Restart mosquitto

- name: Deploy supervisord service description ini
  template:
    src: mosquitto.ini.j2
    dest: "{{ uberspace_services_dir }}/mosquitto.ini"
  notify: Restart mosquitto
- name: Activate supervisord daemon
  tags: supervisor
  supervisorctl:
    name: mosquitto
    state: present

- name: Link default config
  tags: config
  file:
    state: link
    src: /etc/mosquitto/mosquitto.conf
    dest: "{{ uberspace_spacedir }}/etc/mosquitto/conf.d/10_default.conf"
  notify: Restart mosquitto
- name: Deploy main config file
  tags: config
  template:
    src: mosquitto.conf.j2
    dest: "{{ uberspace_spacedir }}/etc/mosquitto/mosquitto.conf"
  notify: Restart mosquitto
- name: Deploy custom config file
  tags: config
  template:
    src: 20_custom.conf.j2
    dest: "{{ uberspace_spacedir }}/etc/mosquitto/conf.d/20_custom.conf"
  notify: Restart mosquitto
- name: Deploy go-auth config file
  tags: authplugin,config
  template:
    src: 30_go-auth.conf.j2
    dest: "{{ uberspace_spacedir }}/etc/mosquitto/conf.d/30_go-auth.conf"
  notify: Restart mosquitto

- name: Start supervisord daemon
  tags: supervisor
  supervisorctl:
    name: mosquitto
    state: started

- name: Copy database dump file
  copy:
    src: owntracks_db.sql
    dest: "{{ mosquitto_main_dir }}"
- name: Create owntracks MySQL db
  tags: stillchanged
  mysql_db:
    name: "{{ mosquitto_mysql_database }}"
    collation: utf8_general_ci
    encoding: utf8
    state: import
    target: "{{ mosquitto_main_dir }}/owntracks_db.sql"

- name: Generate pw
  tags: stillchanged
  vars: 
    user_password: "{{ mosquitto_otrecorder_pw }}"
  include_tasks:
    file: pwgen.yml
    apply:
      tags: stillchanged
- name: Add user to DB
  tags: stillchanged
  mysql_query:
    login_db: "{{ mosquitto_mysql_database }}"
    query:
    - "INSERT INTO users (username, pw) VALUES('{{ mosquitto_otrecorder_user }}', '{{ generated_pw_hash.stdout }}') ON DUPLICATE KEY UPDATE pw='{{ generated_pw_hash.stdout }}';"
#    - "INSERT INTO acl (username, topic, rw) VALUES ('{{ mosquitto_otrecorder_user }}', '{{ mosquitto_topic_otrecorder_sub }}', 1)  ON DUPLICATE KEY UPDATE topic=', 1);"
    single_transaction: true


- name: Deploy createuser.php file
  template:
    src: createuser.php.j2
    dest: "{{ uberspace_webstore }}/{{ mosquitto_host }}/admin/createuser.php"

- name: Deploy config-default.otrc file
  template:
    src: config-default.otrc.j2
    dest: "{{ uberspace_webstore }}/{{ mosquitto_host }}/config-default.otrc"
- name: Deploy customizeConfig.php file
  template:
    src: customizeConfig.php.j2
    dest: "{{ uberspace_webstore }}/{{ mosquitto_host }}/customizeConfig.php"

- name: Deploy index.html file
  template:
    src: index.html.j2
    dest: "{{ uberspace_webstore }}/{{ mosquitto_host }}/index.html"



- name: Add mosquitto ports to the uberspace requested ones
  tags: ports
  set_fact:
    uberspace_ports_goal: "{{ uberspace_ports_goal | default([]) + mosquitto_ports }}"



- name: Clone the ot-recorder source code from GitHub
  tags: otrecorder
  git:
    repo: "{{ mosquitto_otrecorder_repo_url }}"
    dest: "{{ mosquitto_otrecorder_install_dir }}"
    force: true

- name: Copy compile config file template
  tags: otrecorder
  copy:
    remote_src: true
    src: "{{ mosquitto_otrecorder_install_dir }}/config.mk.in"
    dest: "{{ mosquitto_otrecorder_install_dir }}/config.mk"
    force: false

- name: Change specific settings in compile config file
  tags: otrecorder
  loop: "{{ mosquitto_otrecorder_compileconfig_adjustments }}"
  lineinfile:
    dest: "{{ mosquitto_otrecorder_install_dir }}/config.mk"
    line: "{{ item.key }}= {{ item.value }}"
    regexp: "^{{ item.key }}"
  notify: Restart ot-recorder


- name: Build otrecorder via make
  tags: otrecorder
  shell:
    executable: /bin/bash
    chdir: "{{ mosquitto_otrecorder_install_dir }}"
    cmd: "make && make install"
    creates: "{{ uberspace_spacedir }}/sbin/ot-recorder"
  register: otrecorder_build_result
- name: Show otrecorder build result
  tags: otrecorder
  debug:
    msg: "{{ otrecorder_build_result }}"

- name: Deploy otrecorder config
  tags: otrecorder
  template:
    src: owntracks_recorder_config.j2
    dest: "{{ mosquitto_otrecorder_configfilepath }}"


- name: Deploy ot-recorder supervisord service description ini
  tags: otrecorder
  template:
    src: ot-recorder.ini.j2
    dest: "{{ uberspace_services_dir }}/ot-recorder.ini"
  notify: Restart ot-recorder
- name: Activate ot-recorder supervisord daemon
  tags: otrecorder, supervisor
  supervisorctl:
    name: ot-recorder
    state: present


- name: Clone the frontend source code from GitHub
  tags: frontend
  git:
    repo: "{{ mosquitto_otfrontend_repo_url }}"
    dest: "{{ mosquitto_otfrontend_install_dir }}"
    force: true

- name: Build frontend via yarn
  tags: frontend
  shell:
    executable: /bin/bash
    chdir: "{{ mosquitto_otfrontend_install_dir }}"
    cmd: "yarn install && yarn build"
    creates: "{{ mosquitto_otfrontend_install_dir }}/dist"

- name: Add otfrontend as web backend to the uberspace requested ones
  tags: frontend
  set_fact:
    uberspace_webbackends_goal: "{{ uberspace_webbackends_goal | default([]) + mosquitto_otrecorder_webbackends }}"

- name: Copy frontend into webroot
  tags: frontend
  copy:
    remote_src: yes
    src: "{{ mosquitto_otfrontend_install_dir }}/dist/"
    dest: "{{ uberspace_webstore }}/{{ mosquitto_host }}{{ mosquitto_otfrontend_webpath }}"
    force: false

- name: Deploy frontend config file
  tags: frontend
  template:
    src: "frontend-config.js.j2"
    dest: "{{ uberspace_webstore }}/{{ mosquitto_host }}{{ mosquitto_otfrontend_webpath }}/config/config.js"


- name: Include conventure variables
  tags: conventure
  include_vars: "conventure.yml"

- name: Create conventure webbpath directory
  tags: conventure
  file:
    state: directory
    dest: "{{ uberspace_webstore }}/{{ mosquitto_host }}{{ mosquitto_conventure_webpath }}"

- name: Deploy conventure files
  tags: conventure
  loop:
  - index.html
  - customizeConfig.php
  - config-default.otrc
  - createuser.php
  template:
    src: "{{ item }}.j2"
    dest: "{{ uberspace_webstore }}/{{ mosquitto_host }}{{ mosquitto_conventure_webpath }}/{{ item }}"


# - name: Link frontend into webroot
#   tags: frontend
#   file:
#     state: link
#     src: "{{ mosquitto_otfrontend_install_dir }}/dist"
#     dest: "{{ uberspace_webstore }}/{{ mosquitto_host }}/frontend"

# prefix/owntracks/GAME/FACTION/user/device
# ot-recorder auth => NO AUTH!!