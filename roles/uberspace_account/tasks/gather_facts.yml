- name: Get datasheet page
  delegate_to: localhost
  check_mode: false
  uri:
    url: "{{ uberspace_urls.datasheet }}"
    headers: "{{ uberspace_headers }}"
    return_content: true
  register: datasheetresult

- name: Set uberspace facts from dashboard
  set_fact:
    uberspace_ip_public_v4: "{{ parsed_ipv4address }}"
    uberspace_ip_public_v6: "{{ parsed_ipv6address }}"
    uberspace_hostname: "{{ parsed_hostname }}"

- name: Show uberspace_hostname
  debug:
    msg: "Your uberspace name is: {{ uberspace_hostname }}"

- name: Get accounting page
  delegate_to: localhost
  check_mode: false
  uri:
    url: "{{ uberspace_urls.accounting }}"
    headers: "{{ uberspace_headers }}"
    return_content: true
  register: accountingresult

- name: Set uberspace facts from accounting
  set_fact:
    uberspace_balance: "{{ parsed_balance }}"
    uberspace_price_current: "{{ parsed_currentprice }}"

- name: Put host keys into local known_hosts
  delegate_to: localhost
  vars:
    hostkey: "{{ lookup('pipe','ssh-keyscan -t ' + item + ' ' + uberspace_domain_official + ' 2>/dev/null | cut -d \" \" -f 1 --complement') }}"
    actual_hostkey_fingerprint: "{{ lookup('pipe','echo \"' + hostkey + '\" | ssh-keygen -l -f - | cut -d \" \" -f 2 | cut -d \":\" -f 2') }}"
    ssh_hostnames:
    - "{{ uberspace_domain_official }}"
    - "{{ uberspace_ip_public_v4 }}"
    - "{{ uberspace_ip_public_v6 }}"
  loop:
  - ed25519
  - rsa
  when: actual_hostkey_fingerprint == parsed_hostkeyfingerprint
  known_hosts:
    name: "{{ uberspace_domain_official }}"
    key: "{{ ssh_hostnames | join(',') }} {{ hostkey }}"

- name: Gather facts
  gather_facts:

# - name: Show all facts
#   debug:
#     msg: "{{ ansible_facts }}"
# - name: Show some facts
#   debug:
#     msg: "{{ ansible_local }}"

- name: Blow up web backends per domain
  tags: backends
  loop: "{{ ansible_local.users[uberspace_loginname].domains | default({}) | dict2items }}"
  vars:
    backends_per_domain: "{{ [{'domain': item.key, 'backends': (item.value.web.backends | default({}) | dict2items) } ] }}"
    backends_per_domain_blownup: "{{ backends_per_domain | subelements('backends') }}"
  set_fact:
    all_backends_per_domain_blownup: "{{ all_backends_per_domain_blownup | default([]) + backends_per_domain_blownup }}"

# - name: Show blown-up web backends per domain
#   debug:
#     msg: "{{ all_backends_per_domain_blownup | default([]) }}"

- name: Structure web backends per domain
  tags: backends
  loop: "{{ all_backends_per_domain_blownup | default([]) }}"
  vars:
    backend_structured: "{{ {'domain': item[0].domain, 'path': item[1].key, 'port': item[1].value.port, 'fullpath': (item[0].domain + item[1].key), 'remove_prefix': item[1].value.remove_prefix, 'transport': item[1].value.transport} }}"
  set_fact:
    all_backends_structured: "{{ all_backends_structured | default([]) + [ backend_structured ] }}"

# - name: Show global web backends
#   debug:
#     msg: "{{ ansible_local.users[uberspace_loginname].global_backends | default([]) }}"
#
# - name: Show structured web backends per domain
#   debug:
#     msg: "{{ all_backends_structured | default([]) }}"

- name: Merge global and structured web backends per domain
  tags: backends
  loop: "{{ ansible_local.users[uberspace_loginname].global_backends | default({}) | dict2items }}"
  vars:
    backend_global_adjusted: "{{ item.value | combine({'path': item.key, 'fullpath': item.key}) }}"
  set_fact:
    all_backends_merged: "{{ all_backends_merged | default(all_backends_structured) | default([]) + [ backend_global_adjusted ] }}"

- name: Set uberspace facts from ansible facts
  set_fact:
    uberspace_ip_private_v4: "{{ ansible_default_ipv4.address }}"
    uberspace_ip_private_v6: "{{ ansible_default_ipv6.address }}"
    uberspace_host: "{{ ansible_hostname }}"
    uberspace_domains: "{{ ((ansible_local.users[uberspace_loginname].domains) | default({})).keys() | list }}"
    uberspace_ports: "{{ ansible_local.users[uberspace_loginname].public_ports | default([]) }}"
    uberspace_webbackends: "{{ all_backends_merged | default(all_backends_structured) | default([]) }}"
    uberspace_webheaders: "{{ ansible_local.users[uberspace_loginname].global_headers | default([]) }}"
    uberspace_tools: "{{ ansible_local.users[uberspace_loginname].versions }}"

- name: Get MySQL my.cnf file
  tags: mysql
  check_mode: false
  fetch:
    flat: true
    src: ".my.cnf"
    dest: "{{ uberspace_mycnffetch_destination }}"

- name: Store MySQL passwords as fact
  tags: mysql
  set_fact:
    uberspace_mysqlpassword: "{{ lookup('ini', 'password section=client file=' + uberspace_mycnffetch_destination) }}"
    uberspace_mysqlpassword_readonly: "{{ lookup('ini', 'password section=clientreadonly file=' + uberspace_mycnffetch_destination) }}"

- name: Record some facts as custom stat (set show_custom_stats = yes in ansible.cfg or ANSIBLE_SHOW_CUSTOM_STATS=yes in env)
  set_stats:
    per_host: true
    data:
      balance: "{{ uberspace_balance }}"
      currentprice: "{{ uberspace_price_current }}"
