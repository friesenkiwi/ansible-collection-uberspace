# TODO still necessary? https://github.com/Uberspace/lab/pull/435#discussion_r303610303
- name: Configure luarocks - Add luarocks to PATH
  lineinfile:
    path: ~/.bash_profile
    line: PATH=$HOME/.luarocks/bin:$PATH
    insertbefore: export PATH

- name: Configure luarocks - Get luarocks env variables
  check_mode: no
  shell: 'echo "$(luarocks path)"'
  register: luarocks_path
  changed_when: false

- name: Configure luarocks - Add luarocks env variables
  blockinfile:
    path: ~/.bash_profile
    block: "{{ luarocks_path.stdout }}"
    insertbefore: export PATH

- name: Install runtime lua-dependencies
  loop:
  - luasocket
  - luafilesystem
  - luasec
  command:
    cmd: "luarocks install {{ item }} --local"
    creates: "~/.luarocks/lib64/luarocks/rocks/{{ item }}"
  register: luarocks_path
  changed_when: "'is now built and installed in' in luarocks_path.stdout"

- name: Install luaexpat to avoid the stanza size limits message
  loop:
  - luaexpat 1.3.0-3
  command:
    cmd: "luarocks install --server=https://luarocks.org/manifests/zash {{ item }} --local"
    creates: "~/.luarocks/lib64/luarocks/rocks/{{ item.split(' ')[0] }}"
  register: luarocks_path
  changed_when: "'is now built and installed in' in luarocks_path.stdout"

- name: Install runtime lua-dependencies (optional)
  loop:
  - luabitop
  - luaevent
  - luadbi-sqlite3
  command:
    cmd: "luarocks install {{ item }} --local"
    creates: "~/.luarocks/lib64/luarocks/rocks/{{ item }}"
  register: luarocks_path
  changed_when: "'is now built and installed in' in luarocks_path.stdout"

- name: Install runtime lua-dependencies (mysql)
  vars:
    argument: ' MYSQL_BINDIR="/usr/bin" MYSQL_INCDIR="/usr/include/mysql" MYSQL_LIBDIR="/usr/lib64"'
  loop:
  - luadbi-mysql
  command:
    cmd: "luarocks install {{ item }} --local {{ argument }}"
    creates: "~/.luarocks/lib64/luarocks/rocks/{{ item }}"
  register: luarocks_path
  changed_when: "'is now built and installed in' in luarocks_path.stdout"

- name: Create prosody MySQL db
  mysql_db:
    name: "{{ uberspace_loginname }}_prosody"
- name: Create prosody file path
  file:
    path: "{{ prosody_main_dir }}"
    state: directory

- name: "Download and unpack {{ prosody_version }}"
  tags: build
  unarchive:
    remote_src: yes
    src: "{{ prosody_downloadurl }}"
    dest: "{{ prosody_main_dir }}"

- name: Remove prosody config
  tags: build
  when: prosody_rebuild | bool
  file:
    state: absent
    path: "{{ prosody_curversion_dir }}/config.unix"

- name: Configure prosody build
  tags: build
  command:
    chdir: "{{ prosody_curversion_dir }}"
    cmd: "./configure --ostype=linux --prefix={{ prosody_install_dir }} --with-lua-include=/usr/include"
    creates: "{{ prosody_curversion_dir }}/config.unix"

- name: Check if build necessary
  tags: build
  stat:
    path: "{{ prosody_curversion_dir }}/{{ prosody_configfile_name }}.install"
  register: stat_result
- name: Build prosody
  tags: build
  when: not stat_result.stat.exists or prosody_rebuild | bool
  make:
    chdir: "{{ prosody_curversion_dir }}"

- name: Check if install necessary
  tags: build
  stat:
    path: "{{ prosody_install_dir }}/share/man/man1/prosodyctl.1"
  register: stat_result
- name: Install prosody
  tags: build
  when: not stat_result.stat.exists or prosody_rebuild | bool
  make:
    chdir: "{{ prosody_curversion_dir }}"
    target: install
  notify: Restart prosody

- name: Create prosody folders
  loop:
  - "{{ prosody_upload_dir }}"
  - "{{ prosody_dhparam_path | dirname }}"
  - "{{ uberspace_webroot }}/.well-known"
  file:
    path: "{{ item }}"
    state: directory

- name: Download the community plugins
  hg:
    repo: https://hg.prosody.im/prosody-modules
    dest: "{{ prosody_communityplugins_dir }}"
  notify: Restart prosody

- name: Generate strong DHE parameter
  command: openssl dhparam -out {{ prosody_dhparam_path }} {{ prosody_dhparam_size }}
  args:
    creates: "{{ prosody_dhparam_path }}"

- name: Deploy config file
  tags: config
  template:
    src: "{{ prosody_configfile_name }}.j2"
    dest: "{{ prosody_configfile }}"
  notify: Restart prosody

- name: Deploy service
  template:
    src: prosody.ini.j2
    dest: "{{ uberspace_services_dir }}/prosody.ini"
  notify: Reread supervisord config

- name: Add prosody ports to the uberspace requested ones
  set_fact:
    uberspace_ports_goal: "{{ uberspace_ports_goal | default([]) + prosody_ports }}"

- name: Add prosody web backends to the uberspace requested ones
  tags: backends
  set_fact:
    uberspace_webbackends_goal: "{{ uberspace_webbackends_goal | default([]) + prosody_webbackends }}"

- name: install pexpect as a dependency
  pip:
    name: pexpect
    extra_args: --user

- name: Add users
  loop: "{{ prosody_users_complete }}"
  expect:
    command: "{{ uberspace_spacedir }}/bin/prosodyctl adduser {{ item }}"
    responses:
       password: "{{ lookup('password', 'credentials/' + 'prosody_users/' + item) }}"
  register: prosodyctlresult
  changed_when: prosodyctlresult.rc == 0
  failed_when: prosodyctlresult.rc > 1

- name: Install filer
  tags: filer
  include_tasks: filer.yml

- name: Deploy host-meta
  loop:
  -
  - .json
  template:
    src: "host-meta{{ item }}.j2"
    dest: "{{ uberspace_webroot }}/.well-known/host-meta{{ item }}"

- name: Run tasks for invites
  tags: invite
  include_tasks:
    file: invite.yml
    apply:
      tags: invite
