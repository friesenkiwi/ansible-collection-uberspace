-- Prosody Example Configuration File
--
-- Information on configuring Prosody can be found on our
-- website at https://prosody.im/doc/configure
--
-- Tip: You can check that the syntax of this file is correct
-- when you have finished by running this command:
--     prosodyctl check config
-- If there are any errors, it will let you know what and where
-- they are, otherwise it will keep quiet.
--
-- The only thing left to do is rename this file to remove the .dist ending, and fill in the
-- blanks. Good luck, and happy Jabbering!


---------- Server-wide settings ----------
-- Settings in this section apply to the whole server and are the default settings
-- for any virtual hosts

-- This is a (by default, empty) list of accounts that are admins
-- for the server. Note that you must create the accounts separately
-- (see https://prosody.im/doc/creating_accounts for info)
-- Example: admins = { "user1@example.com", "user2@example.net" }
admins = { "{{ prosody_admins | join('", "') }}" }

-- Enable use of libevent for better performance under high load
-- For more information see: https://prosody.im/doc/libevent
--use_libevent = true

-- Prosody will always look in its source directory for modules, but
-- this option allows you to specify additional locations where Prosody
-- will look for modules first. For community modules, see https://modules.prosody.im/
plugin_paths = { "{{ prosody_communityplugins_dir }}" }

-- This is the list of modules Prosody will load on startup.
-- It looks for mod_modulename.lua in the plugins folder, so make sure that exists too.
-- Documentation for bundled modules can be found at: https://prosody.im/doc/modules
modules_enabled = {

	-- Generally required
		"roster"; -- Allow users to have a roster. Recommended ;)
		"saslauth"; -- Authentication for clients and servers. Recommended if you want to log in.
		"tls"; -- Add support for secure TLS on c2s/s2s connections
		"dialback"; -- s2s dialback support
		"disco"; -- Service discovery

	-- Not essential, but recommended
		"carbons"; -- Keep multiple clients in sync
		"pep"; -- Enables users to publish their avatar, mood, activity, playing music and more
		"private"; -- Private XML storage (for room bookmarks, etc.)
		"blocklist"; -- Allow users to block communications with other users
		"vcard4"; -- User profiles (stored in PEP)
		"vcard_legacy"; -- Conversion between legacy vCard and PEP Avatar, vcard

	-- Nice to have
		"version"; -- Replies to server version requests
		"uptime"; -- Report how long server has been running
		"time"; -- Let others know the time here on this server
		"ping"; -- Replies to XMPP pings with pongs
		"register"; -- Allow users to register on this server using a client and change passwords
		--"mam"; -- Store messages in an archive and allow users to access it
		--"csi_simple"; -- Simple Mobile optimizations

	-- Admin interfaces
		"admin_adhoc"; -- Allows administration via an XMPP client that supports ad-hoc commands
		--"admin_telnet"; -- Opens telnet console interface on localhost port 5582

	-- HTTP modules
		"bosh"; -- Enable BOSH clients, aka "Jabber over HTTP"
		--"websocket"; -- XMPP over WebSockets
		"http"; -- Built-In http Server, needed for http_upload
		--"http_files"; -- Serve static files from a directory over HTTP
		--"http_upload"; -- Implements XEP-0363, which lets clients upload files over HTTP
    --"http_upload_external";
	-- Other specific functionality
		--"limits"; -- Enable bandwidth limiting for XMPP connections
		--"groups"; -- Shared roster support
		"server_contact_info"; -- Publish contact information for this service
		"announce"; -- Send announcement to all online users
		"welcome"; -- Welcome users who register accounts
		"watchregistrations"; -- Alert admins of registrations
		"motd"; -- Send a message to users when they log in
		--"legacyauth"; -- Legacy authentication. Only used by some old clients and bots.
		--"proxy65"; -- Enables a file transfer proxy service which clients behind NAT can use
		"blocking"; -- Communications Blocking
		"smacks"; -- Stream Management
		"carbons"; -- shared and synchronized view of all conversations across all online clients and devices
		"csi"; -- Implements Client State Indication
		"throttle_presence"; -- see https://modules.prosody.im/mod_throttle_presence.html
		"offline";
		"register_web";
		"mam";
		"mam_archive";
		"lastlog";
		"cloud_notify";
		"compat_dialback";
		"bookmarks";
		--"http_altconnect";
{% if prosody_turnsecret is defined %}
		"turncredentials";
{% endif %}

		"invites";
		"invites_adhoc";
		"invites_page";
		"invites_register";
		"invites_register_web";

--		"http_libjs";
}

consider_bosh_secure = true
{% if prosody_turnsecret is defined %}
turncredentials_host = "{{ prosody_host }}"
turncredentials_secret = "{{ prosody_turnsecret }}"
turncredentials_port = {{ prosody_port_turn }}
{% endif %}
--libjs_path =

invites_page = "https://{{ prosody_host }}/invite?{invite.token}"
allow_user_invites = true
http_external_url = "https://{{ prosody_host }}/"

--http_files_dir =

http_paths = {
		invites_page = "/invite";
		invites_register_web = "/register";
}

-- site_name =
-- webchat_url =

-- TODO: mod_conversejs,

-- Configure the number of seconds a token is valid for (default 7 days)
invite_expiry = 86400 * 7

-- These modules are auto-loaded, but should you want
-- to disable them then uncomment them here:
modules_disabled = {
	-- "offline"; -- Store offline messages
	-- "c2s"; -- Handle client connections
	-- "s2s"; -- Handle server-to-server connections
	-- "posix"; -- POSIX functionality, sends server to background, enables syslog, etc.
}

-- Disable account creation by default, for security
-- For more information see https://prosody.im/doc/creating_accounts
allow_registration = false

-- The SSL/TLS-related settings.
ssl = {
	-- Allow perfect forward secrecy.
	dhparam = "{{ prosody_dhparam_path }}";
	-- Where Uberspace (or CentOS in general) stores it's trusted CAs.
	cafile = "/etc/pki/tls/certs/ca-bundle.crt";
	-- Best ciphers for perfect forward secrecy.
	--ciphers = "HIGH+kEDH:HIGH+kEECDH:!HIGH+DSA:!HIGH+ECDSA:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4:!SEED:!AES128:!CAMELLIA128:!SHA";
  --protocol = "tlsv1+";
	options = { "no_sslv2", "no_sslv3", "no_ticket", "no_compression", "cipher_server_preference", "single_dh_use", "single_ecdh_use" };
}

-- Force clients to use encrypted connections? This option will
-- prevent clients from authenticating unless they are using encryption.

c2s_require_encryption = true

-- Force servers to use encrypted connections? This option will
-- prevent servers from authenticating unless they are using encryption.

s2s_require_encryption = true

-- Force certificate authentication for server-to-server connections?

s2s_secure_auth = true

-- Some servers have invalid or self-signed certificates. You can list
-- remote domains here that will not be required to authenticate using
-- certificates. They will be authenticated using DNS instead, even
-- when s2s_secure_auth is enabled.

--s2s_insecure_domains = { "insecure.example" }

-- Even if you disable s2s_secure_auth, you can still require valid
-- certificates for some domains by specifying a list here.

--s2s_secure_domains = { "jabber.org" }

-- Select the authentication backend to use. The 'internal' providers
-- use Prosody's configured data storage to store the authentication data.

authentication = "internal_hashed"

-- Select the storage backend to use. By default Prosody uses flat files
-- in its configured data directory, but it also supports more backends
-- through modules. An "sql" backend is included by default, but requires
-- additional dependencies. See https://prosody.im/doc/storage for more info.

-- MANUAL EDIT from https://github.com/siacs/Conversations/issues/2071#issuecomment-266162519
default_storage = "internal" -- Default is "internal"
storage = {
        -- This makes mod_mam_muc use the sql storage backend (others will use internal)
        -- which at the time of this writing is the only one supporting stanza archives
        muc_log = "sql";
        archive2 = "sql";
}
-- END MANUAL EDIT

--storage = "sql" -- Default is "internal"

-- For the "sql" backend, you can uncomment *one* of the below to configure:
--sql = { driver = "SQLite3", database = "prosody.sqlite" } -- Default. 'database' is the filename.
sql = { driver = "MySQL", database = "{{ prosody_db_name }}", username = "{{ prosody_db_user }}", password = "{{ prosody_db_pw }}", host = "{{ prosody_db_host }}" }
--sql = { driver = "PostgreSQL", database = "prosody", username = "prosody", password = "secret", host = "localhost" }

-- Location of the Prosody data storage directory
data_path = "{{ prosody_main_dir }}/data";

-- Archiving configuration
-- If mod_mam is enabled, Prosody will store a copy of every message. This
-- is used to synchronize conversations between multiple clients, even if
-- they are offline. This setting controls how long Prosody will keep
-- messages in the archive before removing them.

archive_expires_after = "1w" -- Remove archived messages after 1 week

-- You can also configure messages to be stored in-memory only. For more
-- archiving options, see https://prosody.im/doc/modules/mod_mam

-- POSIX configuration
pidfile = "{{ prosody_pidfile }}";
-- IMPORTANT for daemontools! DO NOT EDIT!
daemonize = false;

-- Logging configuration
-- For advanced logging see https://prosody.im/doc/logging
log = {
	-- info = "*console"
	info = "{{ prosody_main_dir }}/prosody.log"; -- Change 'info' to 'debug' for verbose logging
	--error = "prosody.err";
	-- "*syslog"; -- Uncomment this for logging to syslog
	-- "*console"; -- Log to the console, useful for debugging with daemonize=false
}

-- Uncomment to enable statistics
-- For more info see https://prosody.im/doc/statistics
-- statistics = "internal"

legacy_ssl_ports = { {{ prosody_port_client_tls }} }

-- PROXY65
proxy65_ports = { {{ prosody_port_proxy65 }} }

-- Build-in http Server
http_ports = { {{ prosody_port_http }} }
https_ports = { }
--https_ports = { {{ prosody_port_https | default('') }} }

-- Server to Server
s2s_ports = { {{ prosody_port_server }} }
-- Client to Server
c2s_ports = { {{ prosody_port_client }} }

interfaces = {"{{ prosody_interface_ipv4 }}", "{{ prosody_interface_ipv6 }}"} -- IPv4 und v6 führt ansonsten zu hohem load! [24]

contact_info = {
  admin = { "mailto:{{ prosody_adminmail }}" };
  abuse = { "mailto:{{ prosody_adminmail }}" };
};

-- Certificates
-- Every virtual host and component needs a certificate so that clients and
-- servers can securely verify its identity. Prosody will automatically load
-- certificates/keys from the directory specified here.
-- For more information, including how to use 'prosodyctl' to auto-import certificates
-- (from e.g. Let's Encrypt) see https://prosody.im/doc/certificates

-- Location of directory to find certificates in (relative to main config file):
certificates = "{{ prosody_certificates_dir }}"

-- HTTPS currently only supports a single certificate, specify it here:
--https_certificate = "{{ prosody_certificates_dir }}/{{ prosody_fulldomain_upload }}.crt"

legacy_ssl_ssl = {
		key = "{{ prosody_certificates_dir }}/{{ prosody_host }}.key";
		certificate = "{{ prosody_certificates_dir }}/{{ prosody_host }}.crt";
}

--
-- HTTP Config
----------------------------------

http_default_host = "{{ prosody_host }}"
http_max_content_size = 52428800; -- bytes 50M

{% if prosody_site_apps is defined %}
site_apps = {{ prosody_site_apps }}
{% endif %}

----------- Virtual hosts -----------
-- You need to add a VirtualHost entry for each domain you wish Prosody to serve.
-- Settings under each VirtualHost entry apply *only* to that host.

VirtualHost "{{ prosody_host }}"
	enabled = true

--VirtualHost "example.com"
--	certificate = "/path/to/example.crt"

  min_seconds_between_registrations = 60

	allow_registration = true
	registration_invite_only = false

	registration_blacklist 	= { "83.218.198.9", "109.185.243.100", "83.218.212.134" }

	registration_notification = "User $username@$host just registered on $host from $ip"

	http_host = "{{ prosody_host }}"

------ Components ------
-- You can specify components to add hosts that provide special services,
-- like multi-user conferences, and transports.
-- For more information on components, see https://prosody.im/doc/components

---Set up a MUC (multi-user chat) room server on {{ prosody_fulldomain_muc }}:
Component "{{ prosody_fulldomain_muc }}" "muc"
	name = "{{ prosody_host }} Groups/Chatrooms/Multi-User"
	restrict_room_creation = false --- user dürfen Räume selbst erstellen
  max_history_messages = 100
--- Store MUC messages in an archive and allow users to access it
	modules_enabled = {
--		"mam_muc",
		"muc_mam",
    "vcard_muc"
	}

-- Set up a SOCKS5 bytestream proxy for server-proxied file transfers:
Component "{{ prosody_fulldomain_proxy }}" "proxy65"
--	proxy65_address = "{{ prosody_host }}"
	proxy65_acl = { "{{ prosody_host }}" }

---Set up an external component (default component port is 5347)
--
-- External components allow adding various services, such as gateways/
-- transports to other networks like ICQ, MSN and Yahoo. For more info
-- see: https://prosody.im/doc/components#adding_an_external_component
--
--Component "gateway.example.com"
--	component_secret = "password"

-- Set up a http file upload because proxy65 is not working in MUC, also for Siskin
Component "{{ prosody_fulldomain_upload }}" "http_upload_external"
	http_upload_external_base_url = "https://{{ prosody_fulldomain_upload }}/upload/"
	http_upload_external_secret = "{{ prosody_upload_secret }}"
	http_upload_external_file_size_limit = 52428800; -- bytes 50M
--
-- MAM settings
-- (Chats nicht standardmäßig loggen, nach einem Monat vom Server löschen)
----------------------------

default_archive_policy = true;
max_archive_query_results = 32
archive_expires_after = "never";
muc_log_by_default = true
muc_log_all_rooms = true

--
-- HTTP Config
----------------------------------

http_paths = {
    register_web = "/register";
}

--
-- Service Discovery
----------------------------------

-- Multi-User-Chat (MUC) soll als verfügbarer XMPP Dienst aufgeführt werden
disco_items = {
    { "{{ prosody_fulldomain_muc }}", "The {{ prosody_host }} MUC" };
}
